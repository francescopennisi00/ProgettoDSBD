version: '3.6'

services:

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-service
    restart: always
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
      - --storage.tsdb.retention.time=15d
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus.rules:/etc/prometheus/prometheus.rules
    networks:
      - weather_network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: weather-cadvisor
    restart: always
    networks:
      - weather_network
    ports:
      - '8082:8080'
    command:
      - '--docker_only=true'
      - '--housekeeping_interval=15s'
    privileged: true
    # cpus: 1
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    labels:
      org.label-schema.group: "monitoring"


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - weather_network
    restart: always
    volumes:
      - zookeeper_data_volume:/var/lib/zookeeper/data
      - zookeeper_log_volume:/var/lib/zookeeper/log
      - zookeeper_secrets_volume:/etc/zookeeper/secrets

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-service
    depends_on:
      - zookeeper
    expose:
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - weather_network
    restart: always
    volumes:
      - kafka_secrets_volume:/etc/kafka/secrets
      - kafka_data_volume:/var/lib/kafka/data

  apigw:
    image: nginx:base
    build:
      context: ../nginx
      dockerfile: Dockerfile
    container_name: nginx_apigw
    ports:
      - '8080:80'
    depends_on:
      - wms_service
      - um_service
    volumes:
      - nginx_volume:/etc/nginx/conf.d
    networks:
      - weather_network
    restart: always

  notifier_mysqlDB:
    image: mysql:latest
    container_name: notifier_mysqlDB
    secrets:
      - notifier_DB_root_psw
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/notifier_DB_root_psw
      MYSQL_DATABASE: notifier
    volumes:
      - notifier_volume:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - weather_network
    restart: always

  notifier_service:
    container_name: notifier-service
    build:
      context: ../notifier_service
      dockerfile: Dockerfile
    image: notifier_service_image:base
    expose:
      - "50055"
    depends_on:
      - notifier_mysqlDB
      - kafka
    secrets:
      - app_password
      - notifier_DB_root_psw
      - email
    environment:
      APP_PASSWORD: /run/secrets/app_password
      HOSTNAME: "notifier_mysqlDB"
      PORT: 3306
      USER: "root"
      PASSWORD: /run/secrets/notifier_DB_root_psw
      DATABASE: "notifier"
      EMAIL: /run/secrets/email
      NOTIFIERID: 1
    networks:
      - weather_network
    restart: always

  um_mysqlDB:
    image: mysql:latest
    container_name: um_mysqlDB
    secrets:
      - um_DB_root_psw
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/um_DB_root_psw
      MYSQL_DATABASE: um
    volumes:
      - um_volume:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - weather_network
    restart: always

  um_service:
    container_name: um-service
    build:
      context: ../user_manager_service
      dockerfile: Dockerfile
    image: user_manager_service_image:base
    depends_on:
      - um_mysqlDB
    expose:
      - "50051"
      - "50052"
      - "50053"
    secrets:
      - um_DB_root_psw
    environment:
      HOSTNAME: "um_mysqlDB"
      PORT: 3306
      USER: "root"
      PASSWORD: /run/secrets/um_DB_root_psw
      DATABASE: "um"
    networks:
      - weather_network
    restart: always

  worker_mysqlDB:
    image: mysql:latest
    container_name: worker_mysqlDB
    secrets:
      - worker_DB_root_psw
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/worker_DB_root_psw
      MYSQL_DATABASE: worker
    volumes:
      - worker_volume:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - weather_network
    restart: always

  worker_service:
    container_name: worker-service
    build:
      context: ../worker_service
      dockerfile: Dockerfile
    image: worker_service_image:base
    expose:
      - "50055"
    depends_on:
      - worker_mysqlDB
      - kafka
    secrets:
      - worker_DB_root_psw
      - apikey
    environment:
      HOSTNAME: "worker_mysqlDB"
      PORT: 3306
      USER: "root"
      PASSWORD: /run/secrets/worker_DB_root_psw
      DATABASE: "worker"
      APIKEY: /run/secrets/apikey
      WORKERID: 1
    networks:
      - weather_network
    restart: always

  wms_mysqlDB:
    image: mysql:latest
    container_name: wms_mysqlDB
    secrets:
      - wms_DB_root_psw
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/wms_DB_root_psw
      MYSQL_DATABASE: wms
    volumes:
      - wms_volume:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - weather_network
    restart: always

  wms_service:
    container_name: wms-service
    build:
      context: ../WMS_service
      dockerfile: Dockerfile
    image: wms_service_image:base
    depends_on:
      - wms_mysqlDB
      - kafka
    expose:
      - "50051"
      - "50052"
    secrets:
      - wms_DB_root_psw
    environment:
      HOSTNAME: "wms_mysqlDB"
      PORT: 3306
      USER: "root"
      PASSWORD: /run/secrets/wms_DB_root_psw
      DATABASE: "wms"
    networks:
      - weather_network
    restart: always

  SLA_mysqlDB:
    image: mysql:latest
    container_name: SLA_mysqlDB
    secrets:
      - SLA_DB_root_psw
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/SLA_DB_root_psw
      MYSQL_DATABASE: sla
    volumes:
      - SLA_volume:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - weather_network
    restart: always

  SLA_service:
    container_name: sla-service
    build:
      context: ../SLA_manager_service
      dockerfile: Dockerfile
    image: sla_manager_service_image:base
    expose:
      - "50055"
    depends_on:
      - SLA_mysqlDB
    secrets:
      - SLA_DB_root_psw
      - email
      - admin_password
    environment:
      HOSTNAME: "SLA_mysqlDB"
      PORT: 3306
      USER: "root"
      PASSWORD: /run/secrets/SLA_DB_root_psw
      DATABASE: "sla"
      EMAIL: /run/secrets/email
      ADMIN_PASSWORD: /run/secrets/admin_password
    networks:
      - weather_network
    restart: always

volumes:
  notifier_volume:
  um_volume:
  worker_volume:
  wms_volume:
  zookeeper_data_volume:
  zookeeper_log_volume:
  zookeeper_secrets_volume:
  kafka_secrets_volume:
  kafka_data_volume:
  nginx_volume:
  prometheus_data:
  SLA_volume:

networks:
  weather_network:

secrets:
  notifier_DB_root_psw:
    file: notifier_DB_root_psw.txt
  um_DB_root_psw:
    file: um_DB_root_psw.txt
  worker_DB_root_psw:
    file: worker_DB_root_psw.txt
  wms_DB_root_psw:
    file: wms_DB_root_psw.txt
  app_password:
    file: app_password.txt
  email:
    file: email.txt
  apikey:
    file: apikey.txt
  SLA_DB_root_psw:
    file: SLA_DB_root_psw.txt
  admin_password:
    file: admin_psw.txt