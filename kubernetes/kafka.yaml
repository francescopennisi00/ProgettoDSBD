apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: weather-app
  labels:
    app: kafka
spec:
  ports:
    - port: 9092
      name: kafka-port1
      protocol: TCP
      targetPort: 9092
    - port: 29092
      name: kafka-port2
      protocol: TCP
      targetPort: 29092
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kafka-stateful-set
  name: kafka-stateful-set
  namespace: weather-app
spec:
  serviceName: "kafka"
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      restartPolicy: Always
      containers:
        - image: confluentinc/cp-kafka:latest
          imagePullPolicy: Always
          name: kafka
          ports:
            - name: kafka-port1
              containerPort: 9092
            - name: kafka-port2
              containerPort: 29092
          volumeMounts:
            - mountPath: /var/lib/kafka/data
              name: kafka-data-volume
            - mountPath: /etc/kafka/secrets
              name: kafka-secrets-volume
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: PLAINTEXT
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
  volumeClaimTemplates:
    - metadata:
        name: kafka-data-volume
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: kafka-secrets-volume
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi